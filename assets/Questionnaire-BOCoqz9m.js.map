{"version":3,"file":"Questionnaire-BOCoqz9m.js","sources":["../../src/Hooks/useCreateForm.jsx","../../src/Hooks/useFinish.jsx","../../src/Data/renderContent.jsx","../../src/Components/Layout/QestionnairBodyLayout.jsx","../../src/pages/Questionnaire.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const useCreateForm = () => {\r\n  const [response, setResponse] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const createForm = async (formData) => {\r\n    setLoading(true);\r\n    setError(null); // Reset error state before making the request\r\n    setResponse(null); // Clear previous response\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        `${import.meta.env.VITE_APP_BASE_API}form`,\r\n        { form_data: formData }, \r\n        {\r\n          headers: {\r\n            'Authorization': `${localStorage.getItem('token')}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n\r\n      setResponse(response.data); // Update response state with the API response data\r\n      return response.data; // Return response data to the caller\r\n    } catch (err) {\r\n \r\n\r\n      // Set error state to \"500\" whenever an error occurs\r\n      setError(err.response ? err.response.status : err.message);\r\n\r\n      //return null; // Return null to indicate failure\r\n    } finally {\r\n      setLoading(false); // Reset the loading state\r\n    }\r\n  };\r\n\r\n  return { createForm, response, loading, error };\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const useFinishForm = () => {\r\n  const [response, setResponse] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const FinishForm = async (formData) => {\r\n    setLoading(true);\r\n    setError(null); // Reset error state before making the request\r\n    setResponse(null); // Clear previous response\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        `${import.meta.env.VITE_APP_BASE_API}form/finish`,\r\n        { form_data: formData }, \r\n        {\r\n          headers: {\r\n            'Authorization': `${localStorage.getItem('token')}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n\r\n      setResponse(response.data); // Update response state with the API response data\r\n      return response.data; // Return response data to the caller\r\n    } catch (err) {\r\n \r\n\r\n      // Set error state to \"500\" whenever an error occurs\r\n      setError(err.response ? err.response.status : err.message);\r\n\r\n      //return null; // Return null to indicate failure\r\n    } finally {\r\n      setLoading(false); // Reset the loading state\r\n    }\r\n  };\r\n\r\n  return { FinishForm, response, loading, error };\r\n};\r\n","import {\r\n\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n  } from '@mui/material';\r\nimport { Container, Box, Typography, FormControl, FormLabel, RadioGroup, FormControlLabel, Radio, Checkbox, TextField, Button } from '@mui/material';\r\nimport parse from 'html-react-parser';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst customRadioStyles = {\r\n  '& .MuiRadio-root': {\r\n      color: 'white',\r\n  },\r\n  '& .MuiRadio-root.Mui-checked': {\r\n      color: 'white',\r\n  },\r\n  '& .MuiRadio-root .MuiSvgIcon-root': {\r\n      backgroundColor: 'white',\r\n      borderRadius: '50%',\r\n  },\r\n};\r\n\r\nconst customCheckboxStyles = {\r\n  '& .MuiCheckbox-root': {\r\n      color: 'white',\r\n  },\r\n  '& .MuiCheckbox-root.Mui-checked': {\r\n      color: 'white',\r\n  },\r\n  '& .MuiCheckbox-root .MuiSvgIcon-root': {\r\n      backgroundColor: 'white',\r\n  },\r\n};\r\n\r\nconst renderContent = (key, value, handleChange, formData) => {\r\n  const isInvalid = (name) => !formData[name] && formData.hasOwnProperty(name); // Check if the field is invalid\r\n    switch (key) {\r\n      case 'H2':\r\n        return <Typography variant=\"h2\">{value}</Typography>;\r\n  \r\n      case 'Text':\r\n        return Array.isArray(value)\r\n          ? value.map((text, index) => <Typography key={index} variant=\"body1\">{parse(text)}</Typography>)\r\n          : <Typography variant=\"body1\">{parse(value)}</Typography>;\r\n  \r\n      case 'radio':\r\n            const [radioQuestion, ...radioOptions] = value;\r\n            return (\r\n              <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">{radioQuestion}</FormLabel>\r\n                <RadioGroup\r\n                  name={radioQuestion}\r\n                  onChange={handleChange}\r\n                  value={formData[radioQuestion] || ''}\r\n                >\r\n                  {radioOptions.map((option, index) => (\r\n                    <FormControlLabel\r\n                      key={index}\r\n                      value={index.toString()} // Use index as the value\r\n                      control={<Radio sx={{ ...customRadioStyles, ...(isInvalid(radioQuestion) ? { border: '2px solid red' } : {}) }} />}\r\n                      label={option}\r\n                    />\r\n                  ))}\r\n                </RadioGroup>\r\n              </FormControl>\r\n            );\r\n      \r\n      \r\n      case 'checkbox':\r\n      const [checkboxQuestion, ...checkboxOptions] = value;\r\n      return (\r\n        <FormControl component=\"fieldset\">\r\n          <FormLabel component=\"legend\">{checkboxQuestion}</FormLabel>\r\n          {checkboxOptions.map((option, index) => (\r\n            <FormControlLabel\r\n              key={index}\r\n              control={\r\n                <Checkbox\r\n                  sx={{ ...customCheckboxStyles, ...(isInvalid(checkboxQuestion) ? { border: '2px solid red' } : {}) }}\r\n                  name={checkboxQuestion}\r\n                  value={option}\r\n                  checked={(formData[checkboxQuestion] || []).includes(option)}\r\n                  onChange={handleChange}\r\n                />\r\n              }\r\n              label={option}\r\n            />\r\n          ))}\r\n        </FormControl>\r\n      );\r\n\r\n      case 'checkboxKey':\r\n        const [checkboxKeyQuestion, ...checkboxKeyOptions] = value;\r\n        return (\r\n          <FormControl component=\"fieldset\">\r\n            <FormLabel component=\"legend\">{checkboxKeyQuestion}</FormLabel>\r\n            {checkboxKeyOptions.map((item, index) => (\r\n              <Box key={index} sx={{ mb: 2 }}>\r\n                <Typography variant=\"body1\">{item.label}</Typography>\r\n                <RadioGroup\r\n                  name={`${checkboxKeyQuestion}_${item.label}`} // Unique name for each age field\r\n                  onChange={handleChange}\r\n                  value={formData[`${checkboxKeyQuestion}_${item.label}`] || ''}\r\n                >\r\n                  {item.options.map((option, subIndex) => (\r\n                    <FormControlLabel\r\n                      key={subIndex}\r\n                      value={subIndex.toString()}  // Use index as the value\r\n                      control={<Radio sx={customRadioStyles} />}\r\n                      label={option}\r\n                    />\r\n                  ))}\r\n                </RadioGroup>\r\n              </Box>\r\n            ))}\r\n          </FormControl>\r\n        );\r\n  \r\n      case 'input':\r\n      return (\r\n        <FormControl>\r\n          <FormLabel component=\"legend\">{value}</FormLabel>\r\n          <input\r\n            variant=\"outlined\"\r\n            sx={{ bgcolor: 'white', ...(isInvalid(value) ? { border: '2px solid red' } : {}) }}\r\n            name={value}\r\n            value={formData[value] || ''}\r\n            onChange={handleChange}\r\n            label={value}\r\n          />\r\n        </FormControl>\r\n      );\r\n      case 'inputKey':\r\n      return (\r\n        <FormControl>\r\n          {value.map((item, index) => (\r\n            <Box key={index} sx={{ mb: 2, height: \"44px\" }}>\r\n              <FormLabel>{item.label}</FormLabel>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                sx={{ bgcolor: 'white', height: \"41px\", ...(isInvalid(item.label) ? { border: '2px solid red' } : {}) }}\r\n                name={item.label}\r\n                value={formData[item.label] || ''}\r\n                onChange={handleChange}\r\n              />\r\n            </Box>\r\n          ))}\r\n        </FormControl>\r\n      );\r\n\r\n      case 'ladderRadio': {\r\n      const [ladderQuestion, ladderOptions] = value;\r\n\r\n      return (\r\n        <FormControl className=\"not-required\" component=\"fieldset\" sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' ,marginTop:\"45px\"}}>\r\n          <FormLabel component=\"legend\" sx={{ mb: 2, textAlign: 'left' }}>{ladderQuestion}</FormLabel>\r\n          \r\n          <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', mr: 2 }}>\r\n              {ladderOptions.map((_, index) => (\r\n                <Typography key={index} sx={{ height: '40px', display: 'flex', alignItems: 'center' }}>\r\n                  {ladderOptions.length - 1 - index}\r\n                </Typography>\r\n              ))}\r\n            </Box>\r\n\r\n            <RadioGroup\r\n              name={ladderQuestion}\r\n              onChange={handleChange}\r\n              value={formData[ladderQuestion] || ''}\r\n              sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'space-between', height: '435px' }}\r\n            >\r\n              {ladderOptions.map((_, index) => (\r\n                <FormControlLabel\r\n                  key={index}\r\n                  value={(ladderOptions.length - 1 - index).toString()}\r\n                  control={<Radio sx={{ ...customRadioStyles, ...(isInvalid(ladderQuestion) ? { border: '2px solid red' } : {}) }} />}\r\n                  label=\"\"\r\n                  sx={{ display: 'flex', justifyContent: 'center', height: '38px' }}\r\n                />\r\n              ))}\r\n            </RadioGroup>\r\n\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', ml: 2, height: '435px', justifyContent: \"space-between\" }}>\r\n              {ladderOptions.map((option, index) => (\r\n                <Typography key={index} sx={{ height: '36px', display: 'flex', alignItems: 'center' }}>\r\n                  {option}\r\n                </Typography>\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n        </FormControl>\r\n      );\r\n    }\r\n        \r\n        \r\n        \r\n        \r\n    case 'recreationalActivityTable': {\r\n      const { activities, weightTrainingActivities, timeRanges } = value;\r\n  \r\n      // Function to handle \"Check All\" button click\r\n      \r\n  \r\n      return (\r\n          <Box>\r\n              \r\n              <TableContainer component={Paper}>\r\n                  <Table>\r\n                      <TableHead>\r\n                          <TableRow>\r\n                              <TableCell>Activity</TableCell>\r\n                              {timeRanges.map((range, index) => (\r\n                                  <TableCell sx={{lineHeight:\"19px\"}} key={index}>{range}</TableCell>\r\n                              ))}\r\n                          </TableRow>\r\n                      </TableHead>\r\n                      <TableBody className=\"radio-table\">\r\n                          {activities.map((activity, rowIndex) => (\r\n                              <TableRow key={rowIndex}>\r\n                                  <TableCell>{activity}</TableCell>\r\n                                  {timeRanges.map((range, colIndex) => (\r\n                                      <TableCell key={colIndex}>\r\n                                          <FormControlLabel\r\n                                              control={\r\n                                                  <Radio\r\n                                                      name={activity}\r\n                                                      value={colIndex.toString()}\r\n                                                      checked={formData[activity] === colIndex.toString()}\r\n                                                      onChange={(e) =>\r\n                                                          handleChange({\r\n                                                              target: {\r\n                                                                  name: activity,\r\n                                                                  value: e.target.value,\r\n                                                              },\r\n                                                          })\r\n                                                      }\r\n                                                  />\r\n                                              }\r\n                                          />\r\n                                      </TableCell>\r\n                                  ))}\r\n                              </TableRow>\r\n                          ))}\r\n  \r\n                          {/* Weight Training Activities */}\r\n                          <TableRow>\r\n                              <TableCell colSpan={11}>\r\n                                  <Typography variant=\"h6\">\r\n                                      Weight training or resistance exercises (e.g., free weights or machines)\r\n                                  </Typography>\r\n                              </TableCell>\r\n                          </TableRow>\r\n  \r\n                          {weightTrainingActivities.map((weightActivity, rowIndex) => (\r\n                              <TableRow key={rowIndex}>\r\n                                  <TableCell>{weightActivity}</TableCell>\r\n                                  {timeRanges.map((range, colIndex) => (\r\n                                      <TableCell key={colIndex}>\r\n                                          <FormControlLabel\r\n                                              control={\r\n                                                  <Radio\r\n                                                      name={weightActivity}\r\n                                                      value={colIndex.toString()}\r\n                                                      checked={formData[weightActivity] === colIndex.toString()}\r\n                                                      onChange={(e) =>\r\n                                                          handleChange({\r\n                                                              target: {\r\n                                                                  name: weightActivity,\r\n                                                                  value: e.target.value,\r\n                                                              },\r\n                                                          })\r\n                                                      }\r\n                                                  />\r\n                                              }\r\n                                          />\r\n                                      </TableCell>\r\n                                  ))}\r\n                              </TableRow>\r\n                          ))}\r\n                      </TableBody>\r\n                  </Table>\r\n              </TableContainer>\r\n          </Box>\r\n      );\r\n  }\r\n  \r\n      case 'HTMLTEXT':\r\n        return (\r\n          <Box>\r\n            {parse(value)}\r\n          </Box>\r\n        );\r\n     \r\n        case 'dairyFoodsTable': {\r\n          const { foods, timeRangesFood, title } = value;\r\n      \r\n          // Function to handle \"Check All\" button click\r\n          const handleCheckAll = () => {\r\n              foods.forEach((food) => {\r\n                  // Trigger a change event to check the third radio button (index 2) for each food item\r\n                  handleChange({\r\n                      target: {\r\n                          name: food,\r\n                          value: '2', // Set to the third option (index 2) for each food\r\n                      },\r\n                  });\r\n              });\r\n          };\r\n      \r\n          return (\r\n              <Box>\r\n                  \r\n                  <TableContainer component={Paper}>\r\n                      <Table>\r\n                          <TableHead>\r\n                              <TableRow>\r\n                                  <TableCell>{title}</TableCell>\r\n                                  {timeRangesFood.map((range, index) => (\r\n                                      <TableCell key={index} sx={{lineHeight:\"19px\"}}>{range}</TableCell>\r\n                                  ))}\r\n                              </TableRow>\r\n                          </TableHead>\r\n                          <TableBody className=\"radio-table\">\r\n                              {foods.map((food, rowIndex) => (\r\n                                  <TableRow key={rowIndex}>\r\n                                      <TableCell>{food}</TableCell>\r\n                                      {timeRangesFood.map((range, colIndex) => (\r\n                                          <TableCell key={colIndex}>\r\n                                              <FormControlLabel\r\n                                                  control={\r\n                                                      <Radio\r\n                                                          name={food}\r\n                                                          value={colIndex.toString()}\r\n                                                          checked={formData[food] === colIndex.toString()}\r\n                                                          onChange={(e) =>\r\n                                                              handleChange({\r\n                                                                  target: {\r\n                                                                      name: food,\r\n                                                                      value: e.target.value,\r\n                                                                  },\r\n                                                              })\r\n                                                          }\r\n                                                      />\r\n                                                  }\r\n                                              />\r\n                                          </TableCell>\r\n                                      ))}\r\n                                  </TableRow>\r\n                              ))}\r\n                          </TableBody>\r\n                      </Table>\r\n                  </TableContainer>\r\n              </Box>\r\n          );\r\n      }\r\n      \r\n      \r\n    \r\n      case 'FoodsTableTwo': {\r\n        const { foodsTwo = [], TwotimeRangesFood = [], titleTwo = '' } = value || {};\r\n    \r\n        // Function to handle \"Check All\" button click\r\n        const handleCheckAll = () => {\r\n            // Set the third option (index 2) for each food pair\r\n            foodsTwo.forEach((foodPair) => {\r\n                handleChange({\r\n                    target: {\r\n                        name: `${foodPair[0]}_${foodPair[1]}`,\r\n                        value: '2', // Set to the third option (index 2) for each food pair\r\n                    },\r\n                });\r\n            });\r\n        };\r\n    \r\n        return (\r\n            <Box>\r\n               \r\n                <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>{titleTwo}</TableCell>\r\n                                <TableCell></TableCell>\r\n                                {TwotimeRangesFood.map((range, index) => (\r\n                                    <TableCell sx={{lineHeight:\"19px\"}} key={index}>{range}</TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody className=\"radio-table-two\">\r\n                            {foodsTwo.map((foodPair, rowIndex) => (\r\n                                <TableRow key={rowIndex}>\r\n                                    {/* Each row has two TableCells for the two foods */}\r\n                                    <TableCell>{foodPair[0]}</TableCell>\r\n                                    <TableCell>{foodPair[1]}</TableCell>\r\n                                    {TwotimeRangesFood.map((range, colIndex) => (\r\n                                        <TableCell key={colIndex}>\r\n                                            <FormControlLabel\r\n                                                control={\r\n                                                    <Radio\r\n                                                        name={`${foodPair[0]}_${foodPair[1]}`}\r\n                                                        value={colIndex.toString()}\r\n                                                        checked={formData[`${foodPair[0]}_${foodPair[1]}`] === colIndex.toString()}\r\n                                                        onChange={(e) =>\r\n                                                            handleChange({\r\n                                                                target: {\r\n                                                                    name: `${foodPair[0]}_${foodPair[1]}`,\r\n                                                                    value: e.target.value,\r\n                                                                },\r\n                                                            })\r\n                                                        }\r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Box>\r\n        );\r\n    }\r\n    \r\n\r\n    \r\n    case 'radioButtonWithData': {\r\n                const [mainQuestion, ...radioOptionsMany] = value;\r\n                const selectedOption = formData[mainQuestion] || ''; // Track the selected option\r\n          \r\n                return (\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">{mainQuestion}</FormLabel>\r\n                    <RadioGroup name={mainQuestion} onChange={handleChange} value={selectedOption}>\r\n                      {radioOptionsMany.map((option, index) => {\r\n                        const [optionLabel, ...optionDataArray] = option;\r\n          \r\n                        return (\r\n                          <Box key={index}>\r\n                            <FormControlLabel\r\n                              value={optionLabel}\r\n                              control={<Radio sx={customRadioStyles} />}\r\n                              label={optionLabel}\r\n                            />\r\n          \r\n                            {/* Conditionally render nested data when the option is selected */}\r\n                            {selectedOption === optionLabel && optionDataArray.length > 0 && (\r\n                              <Box sx={{ pl: 4 }}>\r\n                                {optionDataArray.map((nestedData, nestedIndex) => {\r\n                                  const [nestedKey, nestedValue] = Object.entries(nestedData)[0];\r\n                                  return (\r\n                                    <Box key={nestedIndex} sx={{ mt: 2 }}>\r\n                                      {renderContent(nestedKey, nestedValue, handleChange, formData)}\r\n                                    </Box>\r\n                                  );\r\n                                })}\r\n                              </Box>\r\n                            )}\r\n                          </Box>\r\n                        );\r\n                      })}\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                );\r\n              }\r\n\r\n    case 'button': {\r\n                const [buttonText, buttonLink] = value;\r\n                return (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    href={buttonLink} // Use href to navigate to the specified link\r\n                    sx={{ my: 2, width: 'fit-content', padding: '8px 16px' }}\r\n                    target=\"_blank\"\r\n                  >\r\n                    {buttonText}\r\n                  </Button>\r\n                );\r\n              }\r\n    case 'radioFemale':\r\n        const userSexAtBirth = useSelector((state) => state.questionnaire?.data?.[\"general-information\"]?.[\"What is your sex assigned at birth?\"]) || \"\";\r\n        \r\n    // Check if userSexAtBirth is \"Female\", only then render the birth control pill question\r\n    if (userSexAtBirth === '1') {\r\n        const [radioFemaleQuestion, ...radioFemaleOptions] = value;\r\n        return (\r\n            <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">{radioFemaleQuestion}</FormLabel>\r\n                <RadioGroup name={radioFemaleQuestion} onChange={handleChange} value={formData[radioFemaleQuestion] || ''}>\r\n                    {radioFemaleOptions.map((option, index) => (\r\n                        <FormControlLabel\r\n                            key={index}\r\n                            value={index.toString()} // Use index as the value\r\n                            control={<Radio sx={customRadioStyles} />}\r\n                            label={option}\r\n                        />\r\n                    ))}\r\n                </RadioGroup>\r\n            </FormControl>\r\n        );\r\n    } else {\r\n        // If not female, don't render anything or render a placeholder\r\n        return null;\r\n    }\r\n    case 'RecuresiveQuestion': {\r\n      const { inpute, recursiveContent, title } = value; // Destructure input, recursive content, and title\r\n      const numberOfParents = parseInt(formData[inpute.key] || '0', 10); // Get the number input (default to 0)\r\n    \r\n      // Handle input change\r\n      const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        // Limit the number to the max value\r\n        if (parseInt(value, 10) <= inpute.max) {\r\n          handleChange(e); // Call the parent handleChange function\r\n        }\r\n      };\r\n    \r\n      return (\r\n        <Box>\r\n          {/* Display the custom title */}\r\n          \r\n    \r\n          {/* Input field for number of family members */}\r\n          <FormControl>\r\n            <FormLabel>{inpute.label}</FormLabel>\r\n            <TextField\r\n              type=\"number\"\r\n              variant=\"outlined\"\r\n              sx={{ bgcolor: 'white' }}\r\n              name={inpute.key}\r\n              value={numberOfParents}\r\n              onChange={handleInputChange}\r\n              inputProps={{ min: 0, max: inpute.max }} // Set the max value from inpute.max\r\n            />\r\n\r\n        {numberOfParents > 0 && (\r\n                  <Typography variant=\"p\" sx={{ mt: 1, color: 'gray',fontSize:\"14px\" }}>\r\n                    Which family members have been diagnosed with Crohn’s disease, ulcerative colitis, or IBD-unclassified? (Select all that apply.)\r\n                  </Typography>\r\n                )}\r\n          </FormControl>\r\n    \r\n          {/* Dynamically render the recursive questions based on the input number */}\r\n          {Array.from({ length: numberOfParents }).map((_, index) => (\r\n            <Box key={index} sx={{ mt: 4, p: 2, border: '1px solid #ccc', borderRadius: '8px' }}>\r\n       \r\n    \r\n              {/* Render each section inside the recursiveContent array */}\r\n              {recursiveContent.map((section, sectionIndex) => (\r\n                <Box key={sectionIndex} sx={{ mt: 2 }}>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">\r\n                      {section.label.replace('index', `${index + 1}`)} \r\n                    </FormLabel>\r\n                    <RadioGroup\r\n                      name={`${inpute.key}_${index}_${section.label}`} // Unique name using the index\r\n                      value={formData[`${inpute.key}_${index}_${section.label}`] || ''}\r\n                      onChange={handleChange}\r\n                    >\r\n                      {section.options.map((option, optionIndex) => (\r\n                        <FormControlLabel\r\n                          key={optionIndex}\r\n                          value={optionIndex.toString()}\r\n                          control={<Radio sx={customRadioStyles} />}\r\n                          label={option}\r\n                        />\r\n                      ))}\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          ))}\r\n        </Box>\r\n      );\r\n    }\r\n    \r\n    \r\n    default:\r\n        return <Typography variant=\"body1\">{value}</Typography>;\r\n    }\r\n  };\r\n\r\nexport default renderContent;","import React, { useState, useEffect } from 'react';\r\nimport { Container, Box, Button, CircularProgress } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setCurrentSectionIndex, saveFormData } from '../../store/slice/questionnaireSlice'; \r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport renderContent from \"../../Data/renderContent\";\r\nimport {useFinishForm,useCreateForm} from \"../../Hooks/index.mjs\"\r\nimport {Prefill} from \"../../Data/index\"\r\nimport {SetFormDataLogin} from \"../../store/slice/questionnaireSlice\" \r\nconst Section = ({ section, log, handleChange, formData }) => {\r\n    return (\r\n        <Box component=\"section\" sx={{ my: 4, display: 'flex', flexDirection: 'column' }}>\r\n            {Object.entries(section).map(([key, value], index) => (\r\n                <React.Fragment key={index}>\r\n                    {renderContent(key, value, handleChange, formData)}\r\n                </React.Fragment>\r\n            ))}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport const QestionnairBodyLayout = ({ data, log, type }) => {\r\n    const [formData, setFormData] = useState({});\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const currentSectionIndex = useSelector((state) => state.questionnaire.currentSectionIndex);\r\n    const sectionTags = useSelector((state) => state.questionnaire.sectionTags);\r\n    const savedData = useSelector((state) => state.questionnaire.data[sectionTags[currentSectionIndex]] || {});\r\n    const allFormData = useSelector((state) => state.questionnaire.data);\r\n    \r\n    const [isSaving, setIsSaving] = useState(false);\r\n    const { createForm :CreateFormQuery, response,loading, error } =  useCreateForm();\r\n    const { FinishForm :FinishFormQuery, response:responseFinish,loading:loadingFinish, error:errorFinish } =  useFinishForm();\r\n    \r\n    \r\n    useEffect(() => {\r\n        if (Object.keys(savedData).length > 0) {\r\n            setFormData(savedData); // Populate the form with saved data if it exists\r\n        }\r\n    }, [currentSectionIndex, savedData]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"error:\",error)\r\n        if (error && (error === 500 || error === 403 )) {\r\n            navigate(\"/login\");\r\n           \r\n        }\r\n    }, [error]);\r\n    \r\n\r\n    const handleChange = (event) => {\r\n        const { name, value, type, checked } = event.target;\r\n        setFormData(prevData => {\r\n            if (type === 'checkbox') {\r\n                const newValue = prevData[name] || [];\r\n                if (checked) {\r\n                    return { ...prevData, [name]: [...newValue, value] };\r\n                } else {\r\n                    return { ...prevData, [name]: newValue.filter(item => item !== value) };\r\n                }\r\n            } else {\r\n                return { ...prevData, [name]: value };\r\n            }\r\n        });\r\n    };\r\n\r\n    const validateForm = () => {\r\n        const formElement = document.getElementById('form');\r\n        const formFields = formElement.querySelectorAll('input, select, textarea');\r\n        const checkedRadioGroups = new Set();\r\n        const checkedCheckboxGroups = new Set();\r\n        let isValid = true; // Assume the form is valid initially\r\n    \r\n        // Reset all fields to remove error indication\r\n        formFields.forEach((field) => {\r\n            field.classList.remove('error-field');\r\n            const parentFieldset = field.closest('fieldset');\r\n            const legend = parentFieldset?.querySelector('legend');\r\n            if (legend) {\r\n                legend.classList.remove('error-field'); // Remove error indication from legend\r\n            }\r\n        });\r\n    \r\n        // Validate each form field\r\n        for (const element of formFields) {\r\n            const parentFieldset = element.closest('fieldset');\r\n            \r\n           \r\n            \r\n            \r\n    \r\n            const fieldName = element.name || element.id || 'Unnamed Field';\r\n    \r\n            if (element.type === 'checkbox') {\r\n                if (element.checked) {\r\n                    checkedCheckboxGroups.add(element.name);\r\n                } else {\r\n                    const legend = parentFieldset?.querySelector('legend');\r\n                    if (legend) {\r\n                        legend.classList.add('error-field'); // Add error style to legend\r\n                    }\r\n                }\r\n            } else if (element.type === 'radio') {\r\n                if (element.checked) {\r\n                    checkedRadioGroups.add(element.name);\r\n                }\r\n            } else if (element.type === 'text') {\r\n                const fieldValue = element.value.trim();\r\n                if (!fieldValue) {\r\n                    console.log(`Text field \"${fieldName}\" is empty!`);\r\n                    element.classList.add('error-field'); // Mark the empty field in red\r\n    \r\n                    const parentDiv = element.closest('.MuiFormControl-root');\r\n                    const legend = parentDiv?.querySelector('legend');\r\n                    if (legend && legend.textContent.includes(\"How old are you?\")) {\r\n                        legend.classList.add('error-field'); // Add error style to \"How old are you?\" legend\r\n                    }\r\n                    console.log(\"false 1 \")\r\n                    isValid = false;\r\n                }\r\n            } else {\r\n                // Additional handling for other input types (e.g., textarea, select)\r\n                const fieldValue = element.value.trim();\r\n                if (!fieldValue) {\r\n                    console.log(`Field \"${fieldName}\" is empty!`);\r\n                    element.classList.add('error-field'); // Mark the empty field in red\r\n                    const legend = parentFieldset?.querySelector('legend');\r\n                    if (legend) {\r\n                        legend.classList.add('error-field'); // Add error style to legend\r\n                    }\r\n                    console.log(\"false 2 \")\r\n                    \r\n                    isValid = false;\r\n                }\r\n            }\r\n        }\r\n    \r\n        // Handle radio group validation\r\n        const radioGroups = formElement.querySelectorAll('input[type=\"radio\"]');\r\n        const uniqueRadioGroups = new Set(Array.from(radioGroups).map(r => r.name));\r\n    \r\n        for (const groupName of uniqueRadioGroups) {\r\n            if (!checkedRadioGroups.has(groupName)) {\r\n                const groupElements = formElement.querySelectorAll(`input[name=\"${groupName}\"]`);\r\n                const parentFieldset = groupElements[0]?.closest('fieldset');\r\n                const legend = parentFieldset?.querySelector('legend');\r\n                if (legend) {\r\n                    legend.classList.add('error-field'); // Add error style to legend\r\n                }\r\n                console.log(\"groupElements:\",parentFieldset)\r\n                console.log(\"false 3 \")\r\n                const isFieldsetNotRequired = parentFieldset?.classList.contains('not-required');\r\n                console.log(\"isFieldsetNotRequired\",isFieldsetNotRequired)\r\n                    // Skip validation if the fieldset has the \"not-required\" class\r\n                    if (isFieldsetNotRequired) {\r\n                        continue;\r\n                    }\r\n                isValid = false;\r\n            }\r\n        }\r\n    \r\n        // Handle checkbox group validation\r\n        const checkboxGroups = formElement.querySelectorAll('input[type=\"checkbox\"]');\r\n        const uniqueCheckboxGroups = new Set(Array.from(checkboxGroups).map(c => c.name));\r\n    \r\n        for (const groupName of uniqueCheckboxGroups) {\r\n            if (!checkedCheckboxGroups.has(groupName)) {\r\n                const groupElements = formElement.querySelectorAll(`input[name=\"${groupName}\"]`);\r\n                const parentFieldset = groupElements[0]?.closest('fieldset');\r\n                const legend = parentFieldset?.querySelector('legend');\r\n                if (legend) {\r\n                    legend.classList.add('error-field'); // Add error style to legend\r\n                }\r\n                \r\n                console.log(\"false 4 \")\r\n                isValid = false;\r\n            }\r\n        }\r\n    \r\n        // Additional validation for specific tables\r\n        const radioTable = document.querySelector('.radio-table');\r\n        if (radioTable) {\r\n            const rows = radioTable.querySelectorAll('tr');\r\n            rows.forEach((row) => {\r\n                const firstCell = row.querySelector('td');\r\n                if (firstCell) {\r\n                    firstCell.classList.remove('error-field'); // Reset error style\r\n                }\r\n    \r\n                const radioButtons = row.querySelectorAll('input[type=\"radio\"]');\r\n                const isSelected = Array.from(radioButtons).some((radio) => radio.checked);\r\n    \r\n                if (!isSelected && firstCell) {\r\n                    firstCell.classList.add('error-field'); // Add error style if no selection\r\n                }\r\n            });\r\n        }\r\n    \r\n        const radioTableTwo = document.querySelector('.radio-table-two');\r\n        if (radioTableTwo) {\r\n            const rows = radioTableTwo.querySelectorAll('tr');\r\n            rows.forEach((row) => {\r\n                const secondCell = row.querySelectorAll('td')[1];\r\n                if (secondCell) {\r\n                    secondCell.classList.remove('error-field'); // Reset error style\r\n                }\r\n    \r\n                const radioButtons = row.querySelectorAll('input[type=\"radio\"]');\r\n                const isSelected = Array.from(radioButtons).some((radio) => radio.checked);\r\n    \r\n                if (!isSelected && secondCell) {\r\n                    secondCell.classList.add('error-field'); // Add error style if no selection\r\n                    console.log(\"false 5 \")\r\n                    isValid = false;\r\n                }\r\n            });\r\n        }\r\n    \r\n        return isValid;\r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    const handelFill = async () => {\r\n        //Prefill\r\n        dispatch(SetFormDataLogin({ data: Prefill }));\r\n        location.reload();\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    const handleSave = async () => {\r\n      setIsSaving(true);  // Set loader to true\r\n      try {\r\n        // Call the API to save form data and await the response\r\n        \r\n        const updatedFormData = {\r\n            ...allFormData,                          // Keep all previous sections' data\r\n            [sectionTags[currentSectionIndex]]: formData // Update the current section's data\r\n        };\r\n        const response = await CreateFormQuery(updatedFormData); // No need to wrap in {}\r\n    \r\n        // Check if there's an error in the response\r\n        if (response?.success) {\r\n          // Dispatch to save the form data in Redux\r\n          dispatch(saveFormData({ currentSectionIndex, data: formData }));\r\n          \r\n          // Display success message\r\n          toast.success('Form has been saved Questionnaire!', {\r\n            position: 'top-right',\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n        } else {\r\n          // If the response indicates failure, handle it\r\n          throw new Error('Failed to save form data');\r\n        }\r\n      } catch (error) {\r\n        // Log the error and show error toast\r\n      \r\n    \r\n        toast.error('Error saving the Questionnaire. Please try again!', {\r\n          position: 'top-right',\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n      } finally {\r\n        // Turn off the loader once the process is done\r\n        setIsSaving(false);\r\n      }\r\n    };\r\n    \r\n    const handleNext =  () => {\r\n     \r\n          \r\n        if (!validateForm()) {\r\n            toast.error('Please fill out all fields.', {\r\n                position: 'top-right',\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n            return;\r\n        }\r\n        dispatch(saveFormData({ currentSectionIndex, data: formData }));\r\n        const updatedFormData = {\r\n            ...allFormData,                          // Keep all previous sections' data\r\n            [sectionTags[currentSectionIndex]]: formData // Update the current section's data\r\n        };\r\n        \r\n        CreateFormQuery(updatedFormData);\r\n   \r\n    \r\n        \r\n        if (currentSectionIndex < sectionTags.length - 1) {\r\n            dispatch(setCurrentSectionIndex(currentSectionIndex + 1));\r\n            setFormData({});\r\n            navigate(`/${sectionTags[currentSectionIndex + 1]}`);\r\n        }\r\n    };\r\n\r\n    const handleFinish = () => {\r\n        if (!validateForm()) {\r\n            toast.error('Please fill out all fields.', {\r\n                position: 'top-right',\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n            return;\r\n        }\r\n        const updatedFormData = {\r\n            ...allFormData,                          // Keep all previous sections' data\r\n            [sectionTags[currentSectionIndex]]: formData // Update the current section's data\r\n        };\r\n       \r\n        \r\n        \r\n        FinishFormQuery(updatedFormData);\r\n        dispatch(saveFormData({ currentSectionIndex, data: formData }));\r\n        navigate(`/optional-survey`);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        if (currentSectionIndex > 0) {\r\n            dispatch(saveFormData({ currentSectionIndex, data: formData }));\r\n            dispatch(setCurrentSectionIndex(currentSectionIndex - 1));\r\n            const updatedFormData = {\r\n                ...allFormData,                          // Keep all previous sections' data\r\n                [sectionTags[currentSectionIndex]]: formData // Update the current section's data\r\n            };\r\n            \r\n            CreateFormQuery(updatedFormData);\r\n            navigate(`/${sectionTags[currentSectionIndex - 1]}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <ToastContainer />\r\n            {type === \"fixe\" ? (\r\n                    <div className='bigger-container'>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => navigate(\"/crohns-disease-information\")}\r\n                        className=\"button-survey bigger\"   \r\n                        \r\n                    >\r\n                        Continue to Crohn’s disease information\r\n                    </Button>\r\n                    </div>\r\n                ) :\"\"}\r\n            <form id=\"form\">\r\n                {data.map((section, index) => (\r\n                    <Section key={index} section={section} log={log} handleChange={handleChange} formData={formData} />\r\n                ))}\r\n\r\n                {type === \"fixe\" ? (\r\n                    <div className='bigger-container'>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => navigate(\"/crohns-disease-information\")}\r\n                        className=\"button-survey bigger\"   \r\n                        \r\n                    >\r\n                        Continue to Crohn’s disease information\r\n                    </Button>\r\n                    </div>\r\n                ) : (\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>\r\n                        <Button className=\"button-survey\" variant=\"contained\" onClick={handleBack} disabled={currentSectionIndex === 0}>\r\n                            Back\r\n                        </Button>\r\n\r\n                        {/* Save button next to Back */}\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            className=\"button-survey\"\r\n                            color=\"primary\"\r\n                            onClick={handleSave}\r\n                            disabled={isSaving}\r\n                        >\r\n                            {isSaving ? 'Saving...' : 'Save'}\r\n                        </Button>\r\n\r\n                        {currentSectionIndex < sectionTags.length - 1 ? (\r\n                            <>\r\n                            <Button className=\"button-survey\" variant=\"contained\" onClick={handleNext}>\r\n                                Next\r\n                            </Button>\r\n                            \r\n                        </>\r\n                        ) : (\r\n                            <Button className=\"button-survey\" variant=\"contained\" onClick={handleFinish}>\r\n                                Finish\r\n                            </Button>\r\n                        )}\r\n                    </Box>\r\n                    \r\n                )}\r\n                {type === \"fixe\"? \"\": \r\n                <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n                <Button className=\"button-survey\" variant=\"contained\" onClick={handelFill}>\r\n                            Fill\r\n                            </Button>\r\n                            </Box>}\r\n            </form>\r\n            \r\n        </Container>\r\n    );\r\n};\r\n","import React,{useEffect} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Container } from '@mui/material';\r\nimport { QestionnairBodyLayout } from \"../Components/Layout/index.mjs\";\r\nimport { setCurrentSectionIndex, saveFormData } from '../store/slice/questionnaireSlice';\r\nimport { useVerifyToken } from '../Hooks/useVerifyToken'; \r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet';\r\nconst Questionnaire = ({ title, Data,type }) => {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const currentSectionIndex = useSelector((state) => state.questionnaire.currentSectionIndex);\r\n    const sectionTags = useSelector((state) => state.questionnaire.sectionTags);\r\n    const { sectionTag } = useParams();\r\n    const { loading: verifyingToken, error: verifyError,success:verifySucces ,userRole} = useVerifyToken();\r\n\r\n    useEffect(() => {\r\n        console.log(\"state:\",userRole.state)\r\n        if(userRole.state===\"1\"){\r\n            if(userRole.role !==\"1\" && type !==\"fixe\"){\r\n                navigate('/profile?role='+userRole.role); \r\n            }   \r\n        }\r\n        \r\n      }, [verifySucces]);\r\n  \r\n    useEffect(() => {\r\n      const expectedSectionTag = sectionTags[currentSectionIndex]; // Get the expected sectionTag based on the currentSectionIndex\r\n       \r\n        \r\n      // Check if the current sectionTag in the URL matches the expected sectionTag\r\n      if (sectionTag !== expectedSectionTag) {\r\n        // If not, navigate to the correct section\r\n        //type\r\n        if( type !== \"fixe\"){\r\n        navigate(`/${expectedSectionTag}`);}\r\n      }\r\n    }, [sectionTag, currentSectionIndex, sectionTags, navigate]);\r\n    return (\r\n        <>\r\n        <Helmet>\r\n                <title>My PRE-Crohn’s Survey</title>\r\n      </Helmet>\r\n            {title ? <div className='title-content'><h1>{title}</h1></div> : \"\"}\r\n            <Container className=\"my-4 qstn-body\">\r\n                <div className=\"\">\r\n                    <QestionnairBodyLayout \r\n                        data={Data} \r\n                        log={true} \r\n                        type={type}\r\n                     \r\n                    />\r\n                </div>\r\n                \r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Questionnaire;\r\n"],"names":["useCreateForm","response","setResponse","useState","loading","setLoading","error","setError","formData","axios","err","useFinishForm","customRadioStyles","customCheckboxStyles","renderContent","key","value","handleChange","isInvalid","name","jsx","Typography","text","index","parse","radioQuestion","radioOptions","jsxs","FormControl","FormLabel","RadioGroup","option","FormControlLabel","Radio","checkboxQuestion","checkboxOptions","Checkbox","checkboxKeyQuestion","checkboxKeyOptions","item","Box","subIndex","TextField","ladderQuestion","ladderOptions","_","activities","weightTrainingActivities","timeRanges","TableContainer","Paper","Table","TableHead","TableRow","TableCell","range","TableBody","activity","rowIndex","colIndex","e","weightActivity","foods","timeRangesFood","title","food","foodsTwo","TwotimeRangesFood","titleTwo","foodPair","mainQuestion","radioOptionsMany","selectedOption","optionLabel","optionDataArray","nestedData","nestedIndex","nestedKey","nestedValue","buttonText","buttonLink","Button","useSelector","state","_c","_b","_a","radioFemaleQuestion","radioFemaleOptions","inpute","recursiveContent","numberOfParents","handleInputChange","section","sectionIndex","optionIndex","Section","log","React","QestionnairBodyLayout","data","type","setFormData","navigate","useNavigate","dispatch","useDispatch","currentSectionIndex","sectionTags","savedData","allFormData","isSaving","setIsSaving","CreateFormQuery","FinishFormQuery","responseFinish","loadingFinish","errorFinish","useEffect","event","checked","prevData","newValue","validateForm","formElement","formFields","checkedRadioGroups","checkedCheckboxGroups","isValid","field","parentFieldset","legend","element","fieldName","parentDiv","radioGroups","uniqueRadioGroups","r","groupName","isFieldsetNotRequired","checkboxGroups","uniqueCheckboxGroups","c","radioTable","row","firstCell","radioButtons","radio","radioTableTwo","secondCell","handelFill","SetFormDataLogin","Prefill","handleSave","updatedFormData","saveFormData","toast","handleNext","setCurrentSectionIndex","handleFinish","handleBack","Container","ToastContainer","Fragment","Questionnaire","Data","sectionTag","useParams","verifyingToken","verifyError","verifySucces","userRole","useVerifyToken","expectedSectionTag","Helmet"],"mappings":"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"}